import express from 'express'
import cors from 'cors'
import dotenv from 'dotenv'
import mongoose from 'mongoose'
import { createServer } from 'http'
import { Server as SocketIOServer } from 'socket.io'
import initSocket from './socket.js'  // рдпреЗ рдирдпрд╛ socket.js рдХреЛ рдЗрдореНрдкреЛрд░реНрдЯ рдХрд░ рд░рд╣реЗ рд╣реИрдВ

dotenv.config()

const app = express()
const httpServer = createServer(app)

const ALLOWED_ORIGINS = [
  'http://localhost:5173',
  'http://localhost:3000',
  process.env.FRONTEND_URL
].filter(Boolean)

const corsOptions = {
  origin(origin, callback) {
    if (!origin || ALLOWED_ORIGINS.includes(origin)) {
      return callback(null, true)
    }
    callback(new Error('CORS blocked'))
  },
  credentials: true
}

app.use(cors(corsOptions))
app.use(express.json())

mongoose
  .connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('тЬЕ MongoDB connected'))
  .catch(err => {
    console.error('тЭМ MongoDB connection error:', err)
    process.exit(1)
  })

app.get('/api/ping', (req, res) => {
  res.json({ message: 'pong' })
})

const io = new SocketIOServer(httpServer, {
  cors: {
    origin: ALLOWED_ORIGINS,
    methods: ['GET', 'POST'],
    credentials: true
  }
})

// рдпрд╣рд╛рдБ рдкрд░ socket.js рд╕реЗ рдмрдирд╛рдпрд╛ рдЧрдпрд╛ socket logic рдЗрдиреАрд╢рд┐рдпрд▓рд╛рдЗрдЬрд╝ рдХрд░реЗрдВ
initSocket(io)

const PORT = process.env.PORT || 5000
httpServer.listen(PORT, () => {
  console.log(`ЁЯЪА Server running on port ${PORT}`)
})
